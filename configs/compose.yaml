version: "2.2"
services:
  jobmanager:
    image: flink-py:1.17
    ports:
      - "8081:8081"
    command: jobmanager
    container_name: jobmanager
    volumes:
      - ../src/pyflink_jobs:/opt/pyflink_jobs
      # - ./lib/flink/flink-sql-connector-kafka-1.17.0.jar:/opt/flink/lib/flink-sql-connector-kafka-1.17.0.jar
      # - ./lib/flink/flink-connector-hive_2.12-1.17.0.jar:/opt/flink/lib/flink-connector-hive_2.12-1.17.0.jar
      # - ./lib/flink/flink-connector-files-1.17.0.jar:/opt/flink/lib/flink-connector-files-1.17.0.jar
      # - ./lib/flink/flink-connector-kafka-1.17.0.jar:/opt/flink/lib/flink-connector-kafka-1.17.0.jar

      - ./plugins/flink/flink-s3-fs-hadoop:/opt/flink/plugins/flink-s3-fs-hadoop
      - ./hive-conf:/opt/hive/conf
      - ../scripts/flink-entrypoint.sh:/flink-entrypoint.sh
      - ./lib/flink:/opt/flink/extra-jars
    entrypoint: ["/bin/bash", "/flink-entrypoint.sh"]


    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager     
        
        taskmanager.numberOfTaskSlots: 10
        parallelism.default: 1
        s3.access-key: minioadmin
        s3.secret-key: minioadmin
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
      
      - pipeline.jars:file:///opt/flink/lib/flink-connector-kafka-1.17.0.jar
    depends_on:
      - kafka

  taskmanager:
    image: flink-py:1.17
    depends_on:
      - jobmanager
    command: taskmanager
    container_name: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager

        taskmanager.numberOfTaskSlots: 10   
        parallelism.default: 10
        s3.access-key: minioadmin
        s3.secret-key: minioadmin
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
    volumes:
      - ./plugins/flink/flink-s3-fs-hadoop:/opt/flink/plugins/flink-s3-fs-hadoop
      - ./hive-conf:/opt/hive/conf
      - ../scripts/flink-entrypoint.sh:/flink-entrypoint.sh
      - ./lib/flink:/opt/flink/extra-jars
    entrypoint: ["/bin/bash", "/flink-entrypoint.sh"]

      # - ./lib/flink/flink-connector-kafka-1.17.0.jar:/opt/flink/lib/flink-connector-kafka-1.17.0.jar

  sql-client:
    image: flink-py:1.17
    container_name: sql-client
    command: sql-client.sh -d /opt/flink/conf/sql-client-defaults.yaml
    stdin_open: true
    tty: true
    depends_on:
      - jobmanager
    volumes:
      - ./init:/opt/sql/init
      # - ../src/pyflink_jobs:/opt/pyflink_jobs
      - ./catalogs:/opt/flink/catalogs 
      - ./plugins/flink/flink-s3-fs-hadoop:/opt/flink/plugins/flink-s3-fs-hadoop
      - ./flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
      # - ./lib/flink/flink-sql-connector-kafka-1.17.0.jar:/opt/flink/lib/flink-sql-connector-kafka-1.17.0.jar
      # - ./lib/flink/clickhouse-jdbc-0.4.6-shaded.jar:/opt/flink/lib/clickhouse-jdbc-0.4.6-shaded.jar
      # - ./lib/flink/flink-connector-hive_2.12-1.17.0.jar:/opt/flink/lib/flink-connector-hive_2.12-1.17.0.jar
      - ./hive-conf:/opt/hive/conf
      - ./lib/flink:/opt/flink/extra-jars
      - ../scripts/flink-entrypoint.sh:/flink-entrypoint.sh

      # - ./lib/flink/flink-connector-kafka-1.17.0.jar:/opt/flink/lib/flink-connector-kafka-1.17.0.jar
    entrypoint: ["/bin/bash", "/flink-entrypoint.sh"]
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.address: jobmanager  

        s3.access-key: minioadmin
        s3.secret-key: minioadmin
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
        fs.s3a.path.style.access: true
      - pipeline.jars:file:///opt/flink/lib/flink-connector-kafka-1.17.0.jar 

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"    
      - "9094:9094"
    environment:
      # Enable Kraft mode (no ZooKeeper)
      KAFKA_KRAFT_MODE: "true"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"

      # Define listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:9094,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093

      # Minimal configs for single-broker mode
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Required for Bitnami
      ALLOW_PLAINTEXT_LISTENER: "yes"

    volumes:
      - kafka-data:/bitnami/kafka
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
  
  mysql:
    image: mysql:lts
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: metastore
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  hive-metastore:
    image: apache/hive:4.0.1
    container_name: hive-metastore
    environment:
      HIVE_METASTORE_DATABASE_HOST: mysql
      HIVE_METASTORE_DATABASE_PORT_NUMBER: 3306
      HIVE_METASTORE_DATABASE_NAME: metastore
      HIVE_METASTORE_DATABASE_USER: root
      HIVE_METASTORE_DATABASE_PASSWORD: root
    # environment:
      HIVE_AUX_JARS_PATH: /opt/hive/auxlib
    entrypoint: ["/bin/bash", "/init.sh"]
    volumes:
    - ./hive-conf:/opt/hive/conf
    # - ./lib/flink/mysql-connector-java-8.0.30.jar:/opt/hive/lib/mysql-connector-java.jar
    - ../scripts/init-hive-metastore.sh:/init.sh
    - ./lib/flink:/opt/hive/auxlib
    # - ./lib/flink/guava-27.1-jre.jar:/opt/hive/lib/guava-27.1-jre.jar

    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "9083:9083"
  # hive-metastore:
  #   image: apache/hive:3.1.3
  #   container_name: hive-metastore
  #   volumes:
  #     - ./lib/hive:/opt/hive/lib
  #   ports:
  #     - "9083:9083"
  #   environment:
  #     HIVE_METASTORE_DB_TYPE: mysql
  #     SERVICE_NAME: metastore
  #     HIVE_METASTORE_URI: thrift://localhost:9083
  #     HIVE_CONF_DIR: /opt/hive/conf
  #   depends_on:
  #     - mysql
  ### BATCH PROCESSING ###
  postgres-db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  mongo-db:
    image: mongo:6
    container_name: mongo_db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongodata:/data/db

  ### BATCH PROCESSING ###



  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123"     # HTTP interface để query từ Metabase hoặc trình duyệt
      - "9002:9000"     # Native TCP client (đổi thành 9001 để không đụng MinIO)
      - "9009:9009"     # Internal communication nếu cần
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    restart: unless-stopped

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"   # Truy cập UI tại http://localhost:3000
    environment:
      MB_DB_TYPE: h2
    depends_on:
      - clickhouse
    restart: unless-stopped

volumes:
  minio-data:
  kafka-data:
  clickhouse_data:

  # Batch Processing
  pgdata:
  mongodata:
  